<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dremio | reimagining data analytics for the modern world</title>
    <link>kstirman.github.io/bookshelf/categories/twitter/index.xml</link>
    <description>Recent content on dremio | reimagining data analytics for the modern world</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="kstirman.github.io/bookshelf/categories/twitter/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Performing basic statistics operations on Twitter data</title>
      <link>/kstirman.github.io/bookshelf/blog/performing-basic-statistics-operations-on-Twitter-data/</link>
      <pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/kstirman.github.io/bookshelf/blog/performing-basic-statistics-operations-on-Twitter-data/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve used Drill&amp;rsquo;s &lt;code&gt;AVG()&lt;/code&gt; function quite a bit previously, but in this post I&amp;rsquo;d like to point out some other basic
statistics operations you can do in Drill.&lt;/p&gt;

&lt;p&gt;For my trial data I&amp;rsquo;m going to reference my trusty corpus of nearly 52,000 tweets pulled from Twitter&amp;rsquo;s streaming API,
and with it I&amp;rsquo;m going to try to get a sense of how long people prefer to make their Twitter profile&amp;rsquo;s &amp;lsquo;real name.&amp;rsquo; To do
this I&amp;rsquo;ll take an average, a standard deviation, and a median of the length of this field in the data.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start with the old news, and take an average:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; SELECT AVG(LENGTH(t.`user`.name)) namelength FROM dfs.`/path/to/tweets.small.json` t;
+--------------------+
|     namelength     |
+--------------------+
| 9.995608290315124  |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing to it, right? Drill also has a built-in function taking the standard deviation, which works in exactly the same way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; SELECT STDDEV(LENGTH(t.`user`.name)) namelength FROM dfs.`/path/to/tweets.small.json` t;
+--------------------+
|     namelength     |
+--------------------+
| 4.981551245459341  |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s no built-in function for finding the median, but we can work it out by issuing a couple queries. First we&amp;rsquo;ll use
a &lt;code&gt;COUNT()&lt;/code&gt; to return the total number of rows, and then use that result to pull a value from the middle of the sorted
set of data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; SELECT COUNT(*) FROM dfs.`/path/to/tweets.small.json` t;
+---------+
| EXPR$0  |
+---------+
| 51916   |
+---------+
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; SELECT LENGTH(t.`user`.name) namelength FROM dfs.`/path/to/tweets.small.json` t ORDER BY namelength LIMIT 1 OFFSET 25958;
+-------------+
| namelength  |
+-------------+
| 10          |
+-------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applying these statistical methods to found data via Drill is an easy task, and it&amp;rsquo;s part of what makes it an attractive
piece of software for those wanting to efficiently explore new sets of information.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>